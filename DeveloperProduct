wait()
local MarketplaceService = game:GetService("MarketplaceService")
local productID = 1150799407
local DataStoreService = game:GetService("DataStoreService")
local DataStore = DataStoreService:GetDataStore("ObbyDataStore")
local players = game:GetService("Players")




local function processReceipt(receiptInfo)
	local player = players:GetPlayerByUserId(receiptInfo.PlayerId)
	local Stage = player.leaderstats.Stage
	local data = DataStore:GetAsync(player.UserId.."-Stage")
	if not player then
		--Player probably left the game
		--If they come back, the callback will be called again
		print("Did not work")
		return Enum.ProductPurchaseDecision.NotProcessedYet
	end
	
	if player then
		if Stage.Value == 52 or Stage.Value > 52 then
			Stage.Value = 52 
			print("Your purchase has been cancelled")
			return Enum.ProductPurchaseDecision.NotProcessedYet
		else
			Stage.Value = Stage.Value + 1
			print("Your purchase has made your stage value".. Stage.Value)
			print("Purchase success")
			local character = player.Character
			local hum = character:WaitForChild("Humanoid")
			hum.Health = 0
		end
	end
	return Enum.ProductPurchaseDecision.PurchaseGranted
	
end
--What it actually does

MarketplaceService.ProcessReceipt = processReceipt

print("Developer Product cycled through")



